#!/usr/bin/env bash
set -Eeuo pipefail

export FZF_DEFAULT_OPTS="--height='100%' --layout='reverse' --cycle --color='bg+:6,fg+:0,hl+:-1,prompt:1,gutter:-1'"

SCREEN_LAYOUTS_PATH="${HOME}/.config/sway/screen-layouts"


run_menu() { j4-dmenu-desktop --no-exec --dmenu='fzf --prompt="Run application: "' | xargs -I{} swaymsg "exec {}"; }

pass_menu() { gopass list --flat | fzf --prompt="Password store: " | xargs -I{} gopass show -c "{}"; }

clip_menu() { cliphist list | fzf --delimiter=$'\t' --with-nth=2 --prompt="Clipboard content: " | cliphist decode | wl-copy; }

_window_switcher() { swaymsg -t get_tree | jq -r 'recurse(.nodes[], .floating_nodes[]) | select(.shell and (.focused | not)) | "\(.id)\t\(.app_id // .window_properties.class)\t\(.name)"' | column -t -s$'\t' -o$'\t' | fzf --delimiter=$'\t' --with-nth=2,3 --prompt="${1^} application: " | cut -d$'\t' -f1 | xargs -I{} swaymsg "[con_id={}] ${1}"; }

focus_menu() { _window_switcher "focus"; }

exit_menu() { _window_switcher "kill"; }

kill_menu() {
  local -r selection="$(ps -u "${USER}" -o pid,pcpu,pmem,comm | sed 1d | fzf --prompt="Kill process: ")"
  if [[ "${selection}" ]]; then
    kill "$(awk '{ print $1 }' <<< "${selection}")"
    notify-send "$(awk '{ print $4 }' <<< "${selection}")" "Killed process" -u low
  fi
}

docker_log_menu() { docker ps --all --format '{{.Names}}' | fzf --prompt="Follow container logs: " | xargs -I{} docker logs --follow "{}"; }

docker_kill_menu() { docker ps --all --format '{{.Names}}' | fzf --prompt="Kill container: " | xargs -I{} docker rm --force --volumes "{}"; }

power_menu() {
  local -r selection="$(fzf --prompt="Power option: " <<< $(printf "[Shutdown]\n[Reboot]\n[Reboot to UEFI]\n[Sleep]\n[Lock]"))"
  case ${selection} in
    "[Shutdown]")
      systemctl poweroff
      ;;
    "[Reboot]")
      systemctl reboot
      ;;
    "[Reboot to UEFI]")
      systemctl reboot --firmware-setup
      ;;
    "[Sleep]")
      systemctl suspend
      ;;
    "[Lock]")
      loginctl lock-session
      ;;
  esac
}

screen_menu() {
  local -r selection="$(find "${SCREEN_LAYOUTS_PATH}" -type f -printf '[%f]\n' | sort | fzf --prompt="Screen layout: " | tr -d "[]")"
  [[ "${selection}" ]] && swaymsg "$(cat ${SCREEN_LAYOUTS_PATH}/${selection})"
  notify-send "${selection}" "Screen layout enabled" -u low
}

theme_menu() {
  local -r selection="$(fzf --prompt="Color theme: " <<< $(printf "[Light]\n[Dark]"))"
  case ${selection} in
    "[Light]")
      color-theme light
      ;;
    "[Dark]")
      color-theme dark
      ;;
  esac
}


# main

case ${1:-} in
  "run")
    run_menu
    ;;
  "pass")
    pass_menu
    ;;
  "clip")
    clip_menu
    ;;
  "focus")
    focus_menu
    ;;
  "exit")
    exit_menu
    ;;
  "kill")
    kill_menu
    ;;
  "docker-logs")
    docker_log_menu
    ;;
  "docker-kill")
    docker_kill_menu
    ;;
  "power")
    power_menu
    ;;
  "screen")
    screen_menu
    ;;
  "theme")
    theme_menu
    ;;
  *)
    >&2 echo "Error: unknown parameters: ${@}"
    exit 1
    ;;
esac
